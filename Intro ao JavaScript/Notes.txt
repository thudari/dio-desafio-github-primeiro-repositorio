JavaScript 

a) variáveis e operadores

Variável (let variavel - pode ser reatribuída) vs Constante (const - não pode ser reatribuída)
Operadores (+ - / *)
CTRL + ' = abre terminal
Palavra reservada fica em rosa.
Usar formato camelCase
/* Usar para comentar
*/
Utilizar pontuação em padrão norte-americano
Separar o código em trechos lógicos (p.e. entradas vs saídas)

Desafio: Faça um programa para calcular o valor de uma viagem.
Você terá 3 variáveis. Sendo elas:
 1 - Preço do combustível;
 2 - Gasto médio de combustível do carro por km;
 3 - Distância em km da viagem;

Imprima no console o valor que será gasto para realizar esta viagem.

b) condicionais

Boolean é a var que representa V ou F (binário 0 ou 1)
Usar === para comparar em igualdade
Operador Se
if (condição) {
    executa este bloco;
}

Oposto ficaria:
if (!condição) {
    executa este bloco;
}

Ou ainda:
if (condição) {
    executa este bloco;
} else {
    executa outro bloco;
}

Composição:
if (condição) {
    executa este bloco;
} else if {
    executa outro bloco;
} else {
    executa outro bloco;
}

Math.pow => lib de matemática, onde pow é método estático e Math 
é uma classe.

c) funções (objeto do tipo função, tb se comportam como valores quanto à manipulação)

Para declarar a função com seus parâmetros sem retorno(procedimento):

function sayMyName(name) {
   console.log('Your name is: ' + name);
}

Para invocar a função:

sayMyName('Thais');

Exemplo de função com retorno(vai devolver um número):

function quadrado(valor) {
   return valor*valor;
}

Declarar função main() para separar código principal das funções auxiliares:

function main() {
   console.log('Programa principal');
   calcularJuros();
}

main();

Função anônima imediatamente declarada (só existe dentro do parênteses):

//Main

(function () {
   const peso = 75;
   const altura = 1.75;

const imc = calcularImc(peso, altura);
   console.log(classificarIMC(imc));
})();

d) objetos e classes

Um objeto literal é uma coleção de dados (coleção dinâmica de chave, valor) => alusão direta a um map.

const thais = {
    nome: 'Thais H.',
    idade: 25
};

Acesso direto:

console.log(thais.nome);
console.log(thais.idade);
console.log(thais);

Posso incrementar o objeto dinamicamente:

thais.altura = 1.65;
console.log(thais);

Uma função dentro de um objeto é chamada de método.

const pessoa = {
    nome: 'Thais H.',
    idade: 25,

    descrever: function () {
	  console.log('Meu nome é ${this.nome} e minha idade é ${this.idade}')
    }
};

pessoa.descrever();

O this assume o contexto do objeto em que está presente e serve para referenciar somente os atributos de um objeto.
Se o parâmetro de uma função criada não for um atributo do objeto, tal par não deve ser referido com this.

Posso acessar através do atributo de forma mais dinâmica:

const atributo = 'idade';
console.log(pessoa[atributo]);

Para evitar repetição de código e garantir padronização, cria-se um modelo do objeto que passa a ser chamado de classe.
Como definir um modelo de pessoa? Vai definir pessoa pra que ela possa ser instanciada.
Assim, classe é uma definição (Contrato do que deve ser aquele objeto) e instância é uma ocorrência do objeto de acordo com o contrato definido na classe.

class Pessoa {
    nome;
    idade;
    anoDeNascimento;

    constructor(nome, idade) {
        this.nome = nome;
        this.idade = idade;
        this.anoDeNascimento = 2022 - idade;
    }

    descrever() {
	 console.log('Meu nome é ${this.nome} e minha idade é ${this.idade}');
    }
}

Obs: this.nome é uma variável do contexto do objeto Pessoa, isto é, atributo do objeto Pessoa. Apenas o nome é uma var local cujo valor é passado para o atributo nome, referido como this.nome.

const thais = new Pessoa();
thais.nome: 'Thais H.';
thais.idade: 25;

O construtor obriga a definição dos parâmetros e novos atributos a partir de deduções.

e) listas

Listas armazenam coleção de dados de forma direta e são representadas em []. A lista pode começar vazia.
Posso ter tipos diferentes dentro da minha lista mas não é usual que isso ocorra.

const alunos = ['João', 'Vitor', 'Marina'];
console.log(alunos[0]);
console.log(alunos[1]);
console.log(alunos[2]);

alunos.push('Renan'); adiciona dinamicamente o Renan
alunos[4] = 'Vinicius'; adiciona diretamente na posição

alunos.pop(); pega o último e remove da lista
alunos.shift(); pega o primeiro e remove da lista

const notas = [5,7,8,2,5];
notas.length; mostra o tamanho da lista

f) Estruturas de repetição

Percorrer lista e fazer soma dinamicamente: iterar a lista começando na posição zero até dar um false na condicional.

for (let index = 0; index < array.length; index++){
	
}

for (let i = 0; index < 10; index++){
	console.log(i);
}
0
1
2
3
4
5
6
7
8
9
10

Uma string é um array de caracteres.

const nome = 'Vitor Johansen Guerra';
for (let i = 0; index < 10; index++){
	letra = nome[i];
        console.log(letra);
}

let soma = 0;
for (let i = 0; index < 10; index++){
	const nota = notas[i];
        soma = soma + nota;
}

const media = soma/notas.length;
console.log(media);

g) depurar código no Visual Code

Executar e depurar => CTRL + shift + D
F5 e F10

h) importação e exportação com JS

Arquivo 1: funcoes-auxiliares.js

function gets() {
	return 10;
}

function print(texto){
	console.log(texto);
}

module.exports = { gets, print };

Arquivo 2: main.js

const funcoes = require('./funcoes-auxiliares');
ou

Conceito destructuring:
const {gets, print} = require('./funcoes-auxiliares');

console.log(funcoes.gets());
ou 
print(gets());


